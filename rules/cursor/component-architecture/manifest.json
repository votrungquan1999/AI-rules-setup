{
  "id": "component-architecture",
  "category": "component-architecture",
  "tags": [
    "architecture",
    "patterns",
    "react",
    "component-architecture",
    "component-structure",
    "components",
    "file-structure",
    "file-organization",
    "directory-structure",
    "organization",
    "state-management",
    "hooks",
    "context",
    "provider",
    "reducers",
    "use-reducer",
    "create-reducer-context",
    "server-client-separation",
    "client-components",
    "ui-components",
    "nextjs",
    "tsx",
    "modular",
    "separation-of-concerns",
    "best-practices",
    "conventions"
  ],
  "description": "Component architecture patterns for React and Next.js applications covering file structure organization with component, UI, state, and type files, state management with hooks and context providers, reducer patterns, component separation strategies, directory organization, and modular architecture best practices for scalable frontend development",
  "version": "1.0.0",
  "lastUpdated": "2025-01-17T00:00:00Z",
  "files": [
    {
      "path": "file-structure-patterns.mdc",
      "description": "File structure patterns and directory organization",
      "required": true
    },
    {
      "path": "state-management-patterns.mdc",
      "description": "State management patterns and context usage",
      "required": true
    }
  ],
  "dependencies": ["typescript-conventions", "react-server-components"],
  "conflicts": []
}
